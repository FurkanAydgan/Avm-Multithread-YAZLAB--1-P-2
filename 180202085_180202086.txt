// basla.java


package avm_multithread;

import java.awt.Graphics;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class Basla {

    JFrame frame;
    JPanel menu = new JPanel();
    JLabel kisi_sayisi = new JLabel("0.kattaki kişi sayisi : " + 0);
    JLabel kisi_sayisi1 = new JLabel("1.kattaki kişi sayisi : " + 0);
    JLabel kisi_sayisi2 = new JLabel("2.kattaki kişi sayisi : " + 0);
    JLabel kisi_sayisi3 = new JLabel("3.kattaki kişi sayisi : " + 0);
    JLabel kisi_sayisi4 = new JLabel("4.kattaki kişi sayisi : " + 0);
    JLabel kuyruk_sayisi = new JLabel("0.kattaki kuyruk sayisi : " + 0);
    JLabel kuyruk_sayisi1 = new JLabel("1.kattaki kuyruk sayisi : " + 0);
    JLabel kuyruk_sayisi2 = new JLabel("2.kattaki kuyruk sayisi : " + 0);
    JLabel kuyruk_sayisi3 = new JLabel("3.kattaki kuyruk sayisi : " + 0);
    JLabel kuyruk_sayisi4 = new JLabel("4.kattaki kuyruk sayisi : " + 0);
    JLabel cikis_kuyruk = new JLabel("Cikis yapan kisiler : " + 0);
    JLabel durum = new JLabel("Asansor 1 durum : " + false);
    JLabel durum2 = new JLabel("Asansor 2 durum : " + false);
    JLabel durum3 = new JLabel("Asansor 3 durum : " + false);
    JLabel durum4 = new JLabel("Asansor 4 durum : " + false);
    JLabel durum5 = new JLabel("Asansor 5 durum : " + false);
    JLabel floor = new JLabel("Bulunduğu kat : " + 0);
    JLabel floor1 = new JLabel("Bulunduğu kat : " + 0);
    JLabel floor2 = new JLabel("Bulunduğu kat : " + 0);
    JLabel floor3 = new JLabel("Bulunduğu kat : " + 0);
    JLabel floor4 = new JLabel("Bulunduğu kat : " + 0);
    JLabel dest = new JLabel("Hedef Kat : " + 0);
    JLabel dest1 = new JLabel("Hedef Kat : " + 0);
    JLabel dest2 = new JLabel("Hedef Kat : " + 0);
    JLabel dest3 = new JLabel("Hedef Kat : " + 0);
    JLabel dest4 = new JLabel("Hedef Kat : " + 0);
    JLabel yon = new JLabel("Yön : ");
    JLabel yon1 = new JLabel("Yön : ");
    JLabel yon2 = new JLabel("Yön : ");
    JLabel yon3 = new JLabel("Yön : ");
    JLabel yon4 = new JLabel("Yön : ");
    JLabel kapasite = new JLabel("Max. kapasite : " + 10);
    JLabel kapasite1 = new JLabel("Max. kapasite : " + 10);
    JLabel kapasite2 = new JLabel("Max. kapasite : " + 10);
    JLabel kapasite3 = new JLabel("Max. kapasite : " + 10);
    JLabel kapasite4 = new JLabel("Max. kapasite : " + 10);
    JLabel icerde = new JLabel("Asansördeki insan : " + 0);
    JLabel icerde1 = new JLabel("Asansördeki insan : " + 0);
    JLabel icerde2 = new JLabel("Asansördeki insan : " + 0);
    JLabel icerde3 = new JLabel("Asansördeki insan : " + 0);
    JLabel icerde4 = new JLabel("Asansördeki insan : " + 0);
    JLabel ic_kuyruk = new JLabel("Kuyruk : ");
    JLabel ic_kuyruk1 = new JLabel("Kuyruk : ");
    JLabel ic_kuyruk2 = new JLabel("Kuyruk : ");
    JLabel ic_kuyruk3 = new JLabel("Kuyruk : ");
    JLabel ic_kuyruk4 = new JLabel("Kuyruk : ");
    JLabel mode = new JLabel("mod : " + "idle");
    JLabel mode1 = new JLabel("mod : " + "idle");
    JLabel mode2 = new JLabel("mod : " + "idle");
    JLabel mode3 = new JLabel("mod : " + "idle");
    JLabel mode4 = new JLabel("mod : " + "idle");
    JLabel katbilgi = new JLabel("0.Kat : ");
    JLabel katbilgi1 = new JLabel("1.Kat : ");
    JLabel katbilgi2 = new JLabel("2.Kat : ");
    JLabel katbilgi3 = new JLabel("3.Kat : ");
    JLabel katbilgi4 = new JLabel("4.Kat : ");
    static Kat_Yonetici kat_yonetici;
    static Ciz canvas;
    static Asansor_Thread[] asansorler;

    public synchronized void araYuz() {
        int bosluk = 25;
        frame = new JFrame();
        frame.setResizable(false);
        frame.setSize(650, 1000);
        frame.setTitle("Asansor Uygulaması");
        frame.setLocationRelativeTo(null);
        frame.getContentPane().setLayout(null);
        menu.setLayout(null);
        menu.setSize(650, 1000);
        menu.setBackground(java.awt.Color.WHITE);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        kisi_sayisi.setBounds(10, 10, 170, 25);
        menu.add(kisi_sayisi);
        kuyruk_sayisi.setBounds(200, 10, 170, 25);
        menu.add(kuyruk_sayisi);
        bosluk += 10;

        kisi_sayisi1.setBounds(10, 35, 150, 25);
        menu.add(kisi_sayisi1);
        kuyruk_sayisi1.setBounds(200, 35, 170, 25);
        menu.add(kuyruk_sayisi1);
        bosluk += 25;

        kisi_sayisi2.setBounds(10, 60, 150, 25);
        menu.add(kisi_sayisi2);
        kuyruk_sayisi2.setBounds(200, 60, 170, 25);
        menu.add(kuyruk_sayisi2);
        bosluk += 25;

        kisi_sayisi3.setBounds(10, 85, 150, 25);
        menu.add(kisi_sayisi3);
        kuyruk_sayisi3.setBounds(200, 85, 170, 25);
        menu.add(kuyruk_sayisi3);
        bosluk += 25;

        kisi_sayisi4.setBounds(10, 110, 150, 25);
        menu.add(kisi_sayisi4);
        kuyruk_sayisi4.setBounds(200, 110, 170, 25);
        menu.add(kuyruk_sayisi4);
        bosluk += 40;

        cikis_kuyruk.setBounds(10, 150, 150, 25);
        menu.add(cikis_kuyruk);
        frame.getContentPane().add(menu);
        bosluk += 60;

        durum.setBounds(10, bosluk, 150, 25);
        menu.add(durum);

        durum2.setBounds(250, bosluk, 150, 25);
        menu.add(durum2);
        bosluk += 25;

        mode.setBounds(10, bosluk, 150, 25);
        menu.add(mode);

        mode1.setBounds(250, bosluk, 150, 25);
        menu.add(mode1);
        bosluk += 25;

        floor.setBounds(10, bosluk, 150, 25);
        menu.add(floor);
        floor1.setBounds(250, bosluk, 150, 25);
        menu.add(floor1);
        bosluk += 25;

        dest.setBounds(10, bosluk, 150, 25);
        menu.add(dest);
        dest1.setBounds(250, bosluk, 150, 25);
        menu.add(dest1);
        bosluk += 25;

        yon.setBounds(10, bosluk, 150, 25);
        menu.add(yon);
        yon1.setBounds(250, bosluk, 150, 25);
        menu.add(yon1);
        bosluk += 25;

        kapasite.setBounds(10, bosluk, 150, 25);
        menu.add(kapasite);
        kapasite1.setBounds(250, bosluk, 150, 25);
        menu.add(kapasite1);
        bosluk += 25;

        icerde.setBounds(10, bosluk, 150, 25);
        menu.add(icerde);
        icerde1.setBounds(250, bosluk, 150, 25);
        menu.add(icerde1);
        bosluk += 25;

        ic_kuyruk.setBounds(10, bosluk, 150, 25);
        menu.add(ic_kuyruk);

        ic_kuyruk1.setBounds(250, bosluk, 150, 25);
        menu.add(ic_kuyruk1);
        bosluk += 50;

        durum3.setBounds(10, bosluk, 150, 25);
        menu.add(durum3);

        durum4.setBounds(250, bosluk, 150, 25);
        menu.add(durum4);
        durum5.setBounds(450, bosluk, 150, 25);
        menu.add(durum5);
        bosluk += 25;

        mode2.setBounds(10, bosluk, 150, 25);
        menu.add(mode2);

        mode3.setBounds(250, bosluk, 150, 25);
        menu.add(mode3);

        mode4.setBounds(450, bosluk, 150, 25);
        menu.add(mode4);
        bosluk += 25;

        floor2.setBounds(10, bosluk, 150, 25);
        menu.add(floor2);
        floor3.setBounds(250, bosluk, 150, 25);
        menu.add(floor3);
        floor4.setBounds(450, bosluk, 150, 25);
        menu.add(floor4);
        bosluk += 25;

        dest2.setBounds(10, bosluk, 150, 25);
        menu.add(dest2);
        dest3.setBounds(250, bosluk, 150, 25);
        menu.add(dest3);
        dest4.setBounds(450, bosluk, 150, 25);
        menu.add(dest4);
        bosluk += 25;

        yon2.setBounds(10, bosluk, 150, 25);
        menu.add(yon2);
        yon3.setBounds(250, bosluk, 150, 25);
        menu.add(yon3);
        yon4.setBounds(450, bosluk, 150, 25);
        menu.add(yon4);
        bosluk += 25;

        kapasite2.setBounds(10, bosluk, 150, 25);
        menu.add(kapasite2);
        kapasite3.setBounds(250, bosluk, 150, 25);
        menu.add(kapasite3);
        kapasite4.setBounds(450, bosluk, 150, 25);
        menu.add(kapasite4);
        bosluk += 25;

        icerde2.setBounds(10, bosluk, 150, 25);
        menu.add(icerde2);
        icerde3.setBounds(250, bosluk, 150, 25);
        menu.add(icerde3);
        icerde4.setBounds(450, bosluk, 150, 25);
        menu.add(icerde4);
        bosluk += 25;

        ic_kuyruk2.setBounds(10, bosluk, 150, 25);
        menu.add(ic_kuyruk2);

        ic_kuyruk3.setBounds(250, bosluk, 150, 25);
        menu.add(ic_kuyruk3);

        ic_kuyruk4.setBounds(450, bosluk, 150, 25);
        menu.add(ic_kuyruk4);
        bosluk += 100;

        katbilgi.setBounds(10, bosluk, 500, 25);
        menu.add(katbilgi);
        bosluk += 40;

        katbilgi1.setBounds(10, bosluk, 500, 25);
        menu.add(katbilgi1);
        bosluk += 40;

        katbilgi2.setBounds(10, bosluk, 500, 25);
        menu.add(katbilgi2);
        bosluk += 40;

        katbilgi3.setBounds(10, bosluk, 500, 25);
        menu.add(katbilgi3);
        bosluk += 40;

        katbilgi4.setBounds(10, bosluk, 500, 25);
        menu.add(katbilgi4);
        bosluk += 40;

        canvas = new Ciz();
        frame.getContentPane().add(canvas);
        frame.setVisible(true);
    }

    class Ciz extends JPanel {

        @Override
        public synchronized void paintComponent(Graphics g) {
            super.paintComponent(g);

        }
    }

    public synchronized void Guncelle() {

        kisi_sayisi.setText("0.kattaki kişi sayisi : " + kat_yonetici.getKat_bilgi()[0].getKatta_bulunan_kisi());
        kisi_sayisi1.setText("1.kattaki kişi sayisi : " + kat_yonetici.getKat_bilgi()[1].getKatta_bulunan_kisi());
        kisi_sayisi2.setText("2.kattaki kişi sayisi : " + kat_yonetici.getKat_bilgi()[2].getKatta_bulunan_kisi());
        kisi_sayisi3.setText("3.kattaki kişi sayisi : " + kat_yonetici.getKat_bilgi()[3].getKatta_bulunan_kisi());
        kisi_sayisi4.setText("4.kattaki kişi sayisi : " + kat_yonetici.getKat_bilgi()[4].getKatta_bulunan_kisi());

        kuyruk_sayisi.setText("0.kattaki kuyruk sayisi : " + kat_yonetici.getKat_bilgi()[0].getKuyruk_sayisi());
        kuyruk_sayisi1.setText("1.kattaki kuyruk sayisi : " + kat_yonetici.getKat_bilgi()[1].getKuyruk_sayisi());
        kuyruk_sayisi2.setText("2.kattaki kuyruk sayisi : " + kat_yonetici.getKat_bilgi()[2].getKuyruk_sayisi());
        kuyruk_sayisi3.setText("3.kattaki kuyruk sayisi : " + kat_yonetici.getKat_bilgi()[3].getKuyruk_sayisi());
        kuyruk_sayisi4.setText("4.kattaki kuyruk sayisi : " + kat_yonetici.getKat_bilgi()[4].getKuyruk_sayisi());
        
        cikis_kuyruk.setText("Cikis yapan kisiler : " + kat_yonetici.getCikis_yapan());
        
        durum.setText("Asansor 1 durum : " + asansorler[0].isAsansor_durum());
        durum2.setText("Asansor 2 durum : " + asansorler[1].isAsansor_durum());
        durum3.setText("Asansor 3 durum : " + asansorler[2].isAsansor_durum());
        durum4.setText("Asansor 4 durum : " + asansorler[3].isAsansor_durum());
        durum5.setText("Asansor 5 durum : " + asansorler[4].isAsansor_durum());
        
        floor.setText("Bulunduğu kat : " + asansorler[0].getBulundugu_kat());
        floor1.setText("Bulunduğu kat : " + asansorler[1].getBulundugu_kat());
        floor2.setText("Bulunduğu kat : " + asansorler[2].getBulundugu_kat());
        floor3.setText("Bulunduğu kat : " + asansorler[3].getBulundugu_kat());
        floor4.setText("Bulunduğu kat : " + asansorler[4].getBulundugu_kat());

        dest.setText("Hedef Kat : " + asansorler[0].getHedef_kat());
        dest1.setText("Hedef Kat : " + asansorler[1].getHedef_kat());
        dest2.setText("Hedef Kat : " + asansorler[2].getHedef_kat());
        dest3.setText("Hedef Kat : " + asansorler[3].getHedef_kat());
        dest4.setText("Hedef Kat : " + asansorler[4].getHedef_kat());

        yon.setText("Yön : " + asansorler[0].getYon());
        yon1.setText("Yön : " + asansorler[1].getYon());
        yon2.setText("Yön : " + asansorler[2].getYon());
        yon3.setText("Yön : " + asansorler[3].getYon());
        yon4.setText("Yön : " + asansorler[4].getYon());

        icerde.setText("Asansördeki insan : " + asansorler[0].getYolcu_sayisi());
        icerde1.setText("Asansördeki insan : " + asansorler[1].getYolcu_sayisi());
        icerde2.setText("Asansördeki insan : " + asansorler[2].getYolcu_sayisi());
        icerde3.setText("Asansördeki insan : " + asansorler[3].getYolcu_sayisi());
        icerde4.setText("Asansördeki insan : " + asansorler[4].getYolcu_sayisi());

        mode.setText("mod : " + asansorler[0].getAsansor_mod());
        mode1.setText("mod : " + asansorler[1].getAsansor_mod());
        mode2.setText("mod : " + asansorler[2].getAsansor_mod());
        mode3.setText("mod : " + asansorler[3].getAsansor_mod());
        mode4.setText("mod : " + asansorler[4].getAsansor_mod());

        ic_kuyruk.setText("Kuyruk : " + asansorler[0]);
        ic_kuyruk1.setText("Kuyruk : " + asansorler[1]);
        ic_kuyruk2.setText("Kuyruk : " + asansorler[2]);
        ic_kuyruk3.setText("Kuyruk : " + asansorler[3]);
        ic_kuyruk4.setText("Kuyruk : " + asansorler[4]);

        katbilgi.setText("0.Kat : " + kat_yonetici.getKat_bilgi()[0].toString());
        katbilgi1.setText("1.Kat : " + kat_yonetici.getKat_bilgi()[1].toString());
        katbilgi2.setText("2.Kat : " + kat_yonetici.getKat_bilgi()[2].toString());
        katbilgi3.setText("3.Kat : " + kat_yonetici.getKat_bilgi()[3].toString());
        katbilgi4.setText("4.Kat : " + kat_yonetici.getKat_bilgi()[4].toString());

        canvas.repaint();
    }

    public static void main(String[] args) {
        Basla run = new Basla();
        ArrayList<Asansor_kuyruk>[] kat_bilgi = new ArrayList[5];
        for (int i = 0; i < 5; i++) {
            kat_bilgi[i] = new ArrayList<Asansor_kuyruk>();
        }
        Zaman zaman = new Zaman();
        kat_yonetici = new Kat_Yonetici(zaman);
        Thread[] threads = new Thread[5];
        asansorler = new Asansor_Thread[5];

        for (int i = 0; i < 5; i++) {
            Asansor_Thread asansor = new Asansor_Thread(i, kat_yonetici, zaman);
            threads[i] = new Thread(asansor);
            asansorler[i] = asansor;
        }
        kat_yonetici.asansor_al(asansorler);
        Thread th3 = new Thread(new Kontrol_Thread(zaman, kat_yonetici, threads, asansorler));
        for (int i = 0; i < 5; i++) {
            if (i == 0) {
                asansorler[i].setAsansor_mod("Working");
                asansorler[i].setKontrol_asansor(true);
            } else {
                asansorler[i].setAsansor_mod("idle");
                asansorler[i].setKontrol_asansor(false);
            }
            threads[i].start();
        }

        Thread th1 = new Thread(new Giris_Thread(zaman, kat_yonetici, kat_bilgi));
        th1.start();
        Thread th2 = new Thread(new Cikis_Thread(zaman, kat_yonetici, kat_bilgi));
        th2.start();

        th3.start();
        run.araYuz();

        while (true) {
          
       
            run.Guncelle();
            try {

                TimeUnit.MILLISECONDS.sleep(1);

            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
            zaman.zamanArttir();

        }

    }
}
//---------------------------------------------------------
//Giris_Thread.java


package avm_multithread;

import java.util.ArrayList;
import java.util.Random;


public class Giris_Thread implements Runnable {

    Zaman time;
    ArrayList<Asansor_kuyruk>[] kat_bilgi;
    Kat_Yonetici kat_yonetici;
    int giris_yolcu = 0;
    int b = 0;
    Random rnd;

    public Giris_Thread(Zaman time, Kat_Yonetici kat_yonetici, ArrayList<Asansor_kuyruk>[] kat_bilgi) {
        this.kat_bilgi = kat_bilgi;
        rnd = new Random();
        this.time = time;
        this.kat_yonetici = kat_yonetici;

    }

    @Override
    public void run() {

        while (true) {

            try {
                Asansor_kuyruk a = new Asansor_kuyruk();
                giris_yolcu = rnd.nextInt(10) + 1;
                a.setYolcu_sayisi(giris_yolcu);
                a.setUlasilacak_kat(rnd.nextInt(4) + 1);
                kat_bilgi[0].add(a);
                kat_yonetici.getKat_bilgi()[0].setKuyruk(kat_bilgi[0]);
                kat_yonetici.getKat_bilgi()[0].setKatta_bulunan_kisi(giris_yolcu);
                kat_yonetici.istek_kontrol(0);

                Thread.sleep(500);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

        }
    }

}
//----------------------------------------------------------
//Cikis_Thread.java


package avm_multithread;

import java.util.ArrayList;
import java.util.Random;

public class Cikis_Thread implements Runnable {

    Zaman time;
    Kat_Yonetici kat_yonetici;
    ArrayList<Asansor_kuyruk>[] kat_bilgi;
    Random rnd;
    int a = 0, b = 0;

    public Cikis_Thread(Zaman time, Kat_Yonetici kat_yonetici, ArrayList<Asansor_kuyruk>[] kat_bilgi) {
        rnd = new Random();
        this.kat_bilgi = kat_bilgi;
        this.time = time;
        this.kat_yonetici = kat_yonetici;

    }

    @Override
    public void run() {
        while (true) {
            try {
                do {
                    Asansor_kuyruk kuyruk = new Asansor_kuyruk();
                    int c = 0;
                    a = 1 + rnd.nextInt(4);
                    if (kat_yonetici.getKat_bilgi()[a].getSanal_katta_bulunan() != 0) {

                        c = kat_yonetici.getKat_bilgi()[a].getSanal_katta_bulunan();
                        if (c > 0) {
                            if (c >= 5) {
                                c = 5;
                            }
                            b = rnd.nextInt(c) + 1;
                            kuyruk.setUlasilacak_kat(0);
                            kuyruk.setYolcu_sayisi(b);
                            kat_bilgi[a].add(kuyruk);
                        }

                        break;
                    }

                } while (true);

                kat_yonetici.getKat_bilgi()[a].setKuyruk(kat_bilgi[a]);
                kat_yonetici.getKat_bilgi()[a].sanal_sil(b);
                kat_yonetici.istek_kontrol(a);
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }
        }
    }

}
//----------------------------------------------
//Kontrol_Thread.java


package avm_multithread;


public class Kontrol_Thread implements Runnable {

    Kat_Yonetici kat_yonetici;
    Zaman time;
    int zaman = 0;
    int h;
    int sum = 0, kuyruk = 0;
    Thread[] asansor;
    int temp = 0, sayac = 0, sayi = 0, sayi2 = 0, sayi3 = 0, kontrol = 0, deneme, sayac3 = 0, kontrol2 = 0;
    Asansor_Thread[] asansorler;
    int[] kat;

    public Kontrol_Thread(Zaman time, Kat_Yonetici kat_yonetici, Thread[] asansor, Asansor_Thread[] asansorler) {
        this.kat_yonetici = kat_yonetici;
        this.time = time;
        this.asansor = asansor;
        this.asansorler = asansorler;
        kat = new int[5];
    }

    public synchronized void Asansor_kontrol() {

        for (int i = 0; i < 5; i++) {

            for (int j = 0; j < this.kat_yonetici.getKat_bilgi()[i].getKuyruk().size(); j++) {

                try {
                    this.sum += this.kat_yonetici.getKat_bilgi()[i].getKuyruk().get(j).getYolcu_sayisi();
                    this.kuyruk += this.kat_yonetici.getKat_bilgi()[i].getKuyruk().get(j).getYolcu_sayisi();
                } catch (IndexOutOfBoundsException e) {
                } catch (NullPointerException ex) {
                }

            }

            kat_yonetici.getKat_bilgi()[i].setKuyruk_sayisi(this.kuyruk);
            this.kuyruk = 0;

        }

        deneme = this.sum;
        temp = sum / 20;
        if (sum >= 80) {
            temp = 4;

        }
        this.sum = 0;
        if (temp - sayi3 > 0) {
            while (sayi2 < temp) {

                while (true) {
                    if (asansorler[sayi % 5].isKontrol_asansor() == false && asansorler[sayi % 5].isAsansor_durum() == false) {
                        sayac++;
                        asansorler[sayi % 5].setKontrol_asansor(true);
                        asansorler[sayi % 5].setAsansor_mod("working");
                        asansorler[sayi % 5].setAsansor_durum(true);
                        sayi3 = temp;
                        break;
                    }
                    sayi++;
                }
                sayi2++;
                sayi = 0;
            }
        } else {

            int degs = sayi3;
            int tut = temp;
            if (tut - degs < 0) {
                while (tut < degs) {
                    while (true) {

                        if (asansorler[sayi % 5].isKontrol_asansor() == false && asansorler[sayi % 5].isAsansor_durum() == true) {
                            sayac++;
                            asansorler[sayi % 5].setKontrol_asansor(false);
                            asansorler[sayi % 5].setAsansor_mod("idle");
                            asansorler[sayi % 5].setAsansor_durum(false);
                            sayi3 = temp;
                            break;
                        }

                        sayi++;
                    }
                    sayi = 0;
                    degs--;
                }
                sayi2 = temp;
            } else {
                for (int i = 4; i >= 1; i--) {
                    if (asansorler[i].isKontrol_asansor() == false && asansorler[i].isAsansor_durum() == true) {
                        for (int m = 0; m < 5; m++) {

                            for (int j = 0; j < this.kat_yonetici.getKat_bilgi()[m].getKuyruk().size(); j++) {
                                this.sum += this.kat_yonetici.getKat_bilgi()[m].getKuyruk().get(j).getYolcu_sayisi();
                                this.kuyruk += this.kat_yonetici.getKat_bilgi()[m].getKuyruk().get(j).getYolcu_sayisi();
                            }

                            kat_yonetici.getKat_bilgi()[i].setKuyruk_sayisi(this.kuyruk);
                            this.kuyruk = 0;

                        }
                        temp = this.sum / 20;
                        if (this.sum >= 80) {
                            temp = 4;
                        }

                        if (this.sum >= 20) {
                            if (temp - sayi3 >= 0) {
                                asansorler[i].setKontrol_asansor(true);
                                asansorler[i].setAsansor_mod("Working");
                                kontrol = 1;
                            }
                        }
                        if (kontrol != 1) {
                            if (temp - sayi3 < 0) {

                                asansorler[i].setAsansor_durum(false);
                                asansorler[i].setAsansor_mod("idle");
                                if (temp == 0) {
                                    sayi2 = 0;
                                }
                                if (temp == 1) {
                                    sayi2 = 1;
                                }
                                if (temp == 2) {
                                    sayi2 = 2;
                                }
                                if (temp == 3) {
                                    sayi2 = 3;
                                }
                                if (temp == 4) {
                                    sayi2 = 4;
                                }
                                sayi3 = temp;
                            }
                        }
                        kontrol = 0;
                    }
                }
            }

        }

        sayac = 0;
        sayi = 0;

    }

    @Override
    public void run() {
        while (true) {

            try {

                Asansor_kontrol();

                Thread.sleep(100);
            } catch (InterruptedException ex) {
                ex.printStackTrace();
            }

        }
    }

}
//---------------------------------------------------
//Zaman.java


package avm_multithread;


public class Zaman {
    private static int zaman;
    public Zaman()
    {
        this.zaman=0;
    }
    public synchronized void zamanArttir()
    {
        this.zaman++;
    }

    public synchronized int getZaman() {
        return zaman;
    }
    
}
//---------------------------------------------------
//Kat_Yonetici.java

package avm_multithread;

import static java.lang.Math.abs;



public class Kat_Yonetici {

    Zaman time;
    int istek_kontrol;
    private Kat_Bilgi[] kat_bilgi;
    private int cikis_yapan = 0;
    Asansor_Thread[] asansorler;
    Asansor_kuyruk deneme;
    public Kat_Yonetici(Zaman time) {
        this.time = time;
        kat_bilgi = new Kat_Bilgi[5];
        for (int i = 0; i < 5; i++) {
            kat_bilgi[i] = new Kat_Bilgi();
        }
    }

    public void asansor_al(Asansor_Thread[] asansorler) {
        this.asansorler = asansorler;
    }

    public int getCikis_yapan() {
        return cikis_yapan;
    }

    public void setCikis_yapan(int cikis_yapan) {
        this.cikis_yapan += cikis_yapan;
    }

    public Kat_Bilgi[] getKat_bilgi() {
        return kat_bilgi;
    }

    public synchronized void istek_kontrol(int istek_kontrol) {
        this.istek_kontrol = istek_kontrol;
        Kat_Bilgi kt = kat_bilgi[this.istek_kontrol];
        kt.setYolcu_istek(true);
    }

    public synchronized Asansor_hareket istek_Varmi(int id, int asansor_durum, int asansor_id) {
        if (asansor_durum == 0 || asansor_durum == 1) {
            Kat_Bilgi kat = kat_bilgi[asansor_durum];
            if (kat.isYolcu_istek()) {
                return new Asansor_hareket(asansor_durum, this.time.getZaman());
            } else {
                for (int i = 0; i < 5; i++) {
                    Kat_Bilgi kt = kat_bilgi[i];
                    if (kt.isYolcu_istek()) {
                        if (asansor_durum == i) {
                            kt.setYaklasan_asansor(id);
                            return new Asansor_hareket(i, this.time.getZaman());
                        } else {
                            kt.setYaklasan_asansor(id);
                            if (asansor_durum > i) {
                                asansorler[asansor_id].setYon("Asagi");
                            } else {
                                asansorler[asansor_id].setYon("Yukarı");
                            }
                            return new Asansor_hareket(i, this.time.getZaman() + (int) (abs(i - asansor_durum) * 200));
                        }

                    }
                }
            }

        } else {
            Kat_Bilgi kat = kat_bilgi[asansor_durum];
            if (kat.isYolcu_istek()) {
                return new Asansor_hareket(asansor_durum, this.time.getZaman());
            } else {
                for (int i = 4; i >= 0; i--) {
                    Kat_Bilgi kt = kat_bilgi[i];
                    if (kt.isYolcu_istek()) {

                        if (asansor_durum == i) {
                            kt.setYaklasan_asansor(id);
                            return new Asansor_hareket(i, this.time.getZaman());
                        } else {
                            kt.setYaklasan_asansor(id);
                            if (asansor_durum > i) {
                                asansorler[asansor_id].setYon("Asagi");
                            } else {
                                asansorler[asansor_id].setYon("Yukarı");
                            }
                            return new Asansor_hareket(i, this.time.getZaman() + (int) (abs(i - asansor_durum) * 200));
                        }

                    }
                }
            }
        }
        return null;
    }

   

}
//--------------------------------------------
//Kat_Bilgi.java


package avm_multithread;

import java.util.ArrayList;


public class Kat_Bilgi {

    private int yaklasan_asansor;
    private ArrayList<Asansor_kuyruk> kuyruk;
    private int katta_bulunan_kisi;
    private int sanal_katta_bulunan;
    private boolean yolcu_istek;
    private int kuyruk_sayisi;

    public int getKuyruk_sayisi() {
        return kuyruk_sayisi;
    }

    public void setKuyruk_sayisi(int kuyruk_sayisi) {
        this.kuyruk_sayisi = kuyruk_sayisi;
    }

    public Kat_Bilgi() {
        sanal_katta_bulunan = 0;
        katta_bulunan_kisi = 0;
        yaklasan_asansor = -1;
        kuyruk = new ArrayList<>();
    }

    public int getSanal_katta_bulunan() {
        return sanal_katta_bulunan;
    }

    public synchronized void setSanal_katta_bulunan(int sanal_katta_bulunan) {
        this.sanal_katta_bulunan += sanal_katta_bulunan;
    }

    public synchronized void sanal_sil(int temp) {
        this.sanal_katta_bulunan -= temp;
    }

    public int getKatta_bulunan_kisi() {
        return katta_bulunan_kisi;
    }

    public synchronized void setKatta_bulunan_kisi(int katta_bulunan_kisi) {
        this.katta_bulunan_kisi += katta_bulunan_kisi;
    }

    public int getYaklasan_asansor() {
        return yaklasan_asansor;
    }

    public void setYaklasan_asansor(int yaklasan_asansor) {
        this.yaklasan_asansor = yaklasan_asansor;
    }

    public ArrayList<Asansor_kuyruk> getKuyruk() {
        return kuyruk;
    }

    public void setKuyruk(ArrayList<Asansor_kuyruk> kuyruk) {
        this.kuyruk = kuyruk;
    }

    public synchronized void yolcu_sil(int yolcu_sayisi) {
        this.katta_bulunan_kisi -= yolcu_sayisi;
    }

    public boolean isYolcu_istek() {
        return yolcu_istek;
    }

    public void setYolcu_istek(boolean yolcu_istek2) {
        this.yolcu_istek = yolcu_istek2;
    }

    @Override
    public String toString() {
        String name = "";

        for (int i = 0; i < kuyruk.size(); i++) {
            if (!this.getKuyruk().isEmpty()) {
                try {
                    name += "(" + this.getKuyruk().get(i).getYolcu_sayisi() + "," + this.getKuyruk().get(i).getUlasilacak_kat() + ")";
                } catch (IndexOutOfBoundsException e) {
                    name = "";
                }
               catch (NullPointerException ex) {               
                }
            }
        }

        return name;
    }

}

//---------------------------------------------------------
//Asansor_kuyruk.java


package avm_multithread;


public class Asansor_kuyruk {
    private int yolcu_sayisi;
    private int ulasilacak_kat;
    public Asansor_kuyruk()
    {
       
    }
    public int getYolcu_sayisi() {return yolcu_sayisi;}

    public void setYolcu_sayisi(int yolcu_sayisi) {this.yolcu_sayisi = yolcu_sayisi;}

    public int getUlasilacak_kat() {return ulasilacak_kat;}

    public void setUlasilacak_kat(int ulasilacak_kat) {this.ulasilacak_kat = ulasilacak_kat;}
            
}

//------------------------------------------------------------
//Asansor_hareket.java

package avm_multithread;


public class Asansor_hareket {
    private int varacagi_kat;
    private int varis_suresi;
    public Asansor_hareket()
    {
        int varacagi_kat=0;
        int varis_suresi=0;
    }
    public Asansor_hareket(int varacagi_kat,int varis_suresi)
    {
        this.varacagi_kat=varacagi_kat;
        this.varis_suresi=varis_suresi;
    }

    public int getVaracagi_kat() {
        return varacagi_kat;
    }

    public int getVaris_suresi() {
        return varis_suresi;
    }
    
}
//-------------------------------------------------------
//Asansor_Thread.java

package avm_multithread;

import static java.lang.Math.abs;
import java.util.ArrayList;
import java.util.List;



public class Asansor_Thread implements Runnable {

    Zaman time;
    private int asansor_id;
    private int yolcu_sayisi;
    private boolean asansor_durum;
    private String asansor_mod;
    private int bulundugu_kat;
    private int indirdigi_yolcu_sayi;
    private int max_kapasite;
    private int toplam_aldigi_yolcu;
    private ArrayList<Asansor_hareket> hareket;
    private Kat_Yonetici kontrol;
    private ArrayList<Asansor_kuyruk> inside;
    private String yon = "Yukarı";
    private int hedef_kat = 0;
    private boolean kontrol_asansor;

    public int getHedef_kat() {
        return hedef_kat;
    }

    public ArrayList<Asansor_kuyruk> getInside() {
        return inside;
    }

    public void setHedef_kat(int hedef_kat) {
        this.hedef_kat = hedef_kat;
    }

    public String getYon() {
        return yon;
    }

    public void setYon(String yon) {
        this.yon = yon;
    }

    public void setAsansor_durum(boolean asansor_durum) {
        this.asansor_durum = asansor_durum;
    }

    public synchronized boolean isKontrol_asansor() {
        return kontrol_asansor;
    }

    public synchronized void setKontrol_asansor(boolean kontrol_asansor) {
        this.kontrol_asansor = kontrol_asansor;
    }

    public Asansor_Thread() {

    }

    public Asansor_Thread(int ID, Kat_Yonetici kontrol, Zaman time) {
        this.asansor_id = ID;
        this.kontrol = kontrol;
        this.max_kapasite = 10;
        this.asansor_durum = false;
        this.bulundugu_kat = 0;
        this.indirdigi_yolcu_sayi = 0;
        this.toplam_aldigi_yolcu = 0;
        this.yolcu_sayisi = 0;
        this.hareket = new ArrayList<>();
        this.time = time;

        inside = new ArrayList<>();
    }

    public int getBulundugu_kat() {
        return bulundugu_kat;
    }

    public int getYolcu_sayisi() {
        return yolcu_sayisi;
    }

    public int getAsansor_id() {
        return asansor_id;
    }

    public boolean isAsansor_durum() {
        return asansor_durum;
    }

    public int getIndirdigi_yolcu_sayi() {
        return indirdigi_yolcu_sayi;
    }

    public synchronized void setIndirdigi_yolcu_sayi(int indirdigi_yolcu_sayi) {
        this.indirdigi_yolcu_sayi += indirdigi_yolcu_sayi;
    }

    public int getMax_kapasite() {
        return max_kapasite;
    }

    public int getToplam_aldigi_yolcu() {
        return toplam_aldigi_yolcu;
    }

    public synchronized void setToplam_aldigi_yolcu(int toplam_aldigi_yolcu) {
        this.toplam_aldigi_yolcu += toplam_aldigi_yolcu;
    }

    public ArrayList<Asansor_hareket> getHareket() {
        return hareket;
    }

    public Kat_Yonetici getKontrol() {
        return kontrol;
    }

    public  void hareket(Asansor_hareket hareket) {
        if (hareket != null) {
            this.hareket.add(hareket);
        }
    }

    public  String getAsansor_mod() {
        return asansor_mod;
    }

    public  void setAsansor_mod(String asansor_mod) {
        this.asansor_mod = asansor_mod;
    }

    public  void hareket(List<Asansor_hareket> events) {
        this.hareket.addAll(events);
    }

    @Override
    public synchronized String toString() {
        String name = "";

        for (int i = 0; i < this.inside.size(); i++) {
            if (!this.inside.isEmpty()) {
                try {

                    name += "(" + this.getInside().get(i).getYolcu_sayisi() + "," + this.getInside().get(i).getUlasilacak_kat() + ")";
                } catch (IndexOutOfBoundsException e) {
                    name = "";
                }
                catch (NullPointerException ex) {
                    name="";
                }
            }

        }

        return name;
    }

    public synchronized Asansor_hareket yolcu_yukle(ArrayList<Asansor_kuyruk> kuyruk) {

        ArrayList<Asansor_kuyruk> temp = new ArrayList<>();
        ArrayList<Asansor_hareket> hareket = new ArrayList<>();
        int alinan_yolcu = 0;

        int kucuk = kuyruk.get(0).getUlasilacak_kat();

        int tut = 0;

        int tut2 = kuyruk.size();
        for (int j = 0; j < tut2; j++) {
            for (int i = 0; i < kuyruk.size(); i++) {
                if (kucuk > kuyruk.get(i).getUlasilacak_kat()) {
                    kucuk = kuyruk.get(i).getUlasilacak_kat();
                    tut = i;
                }
            }
            temp.add(kuyruk.get(tut));
            kuyruk.remove(tut);
            tut = 0;
        }

        for (int i = this.bulundugu_kat; i < 5; i++) {
            for (int k = 0; k < temp.size(); k++) {
                if (temp.get(k).getUlasilacak_kat() == i) {
                    hareket.add(new Asansor_hareket(i, this.time.getZaman() + (int) (abs(i - this.bulundugu_kat) * 200) ));
                    alinan_yolcu += temp.get(k).getYolcu_sayisi();

                    this.yon = "Yukari";
                }
            }

        }
        if (hareket.isEmpty()) {

            for (int i = this.bulundugu_kat - 1; i >= 0; i--) {
                for (int k = 0; k < temp.size(); k++) {
                    if (temp.get(k).getUlasilacak_kat() == i) {
                        hareket.add(new Asansor_hareket(i, this.time.getZaman() + (int) (abs(i - this.bulundugu_kat) * 200)));
                        alinan_yolcu += temp.get(k).getYolcu_sayisi();

                        this.yon = "Asagi";
                    }
                }
            }
        }
        this.hareket(hareket);
        this.asansor_durum = true;
        this.yolcu_sayisi += alinan_yolcu;
        this.inside.addAll(temp);

        return hareket.get(0);
    }

     public synchronized ArrayList<Asansor_kuyruk> yolcu_yukle2(int kat, int asansorID, int kapasite) {
        int i = 0;
        int kapa = 0;
        int temp=0;
        this.getKontrol().getKat_bilgi()[0].setYaklasan_asansor(-1);
        int size = this.getKontrol().getKat_bilgi()[kat].getKuyruk().size();
        Asansor_kuyruk deneme;
        ArrayList<Asansor_kuyruk> iceridekiler = new ArrayList<>();
        if (!this.getKontrol().getKat_bilgi()[kat].getKuyruk().isEmpty()) {
            do {

                if (i == size) {
                    break;
                }

                kapa += this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).getYolcu_sayisi();
                if (kapa <= kapasite) {
                    
                    try{
                    temp += this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).getYolcu_sayisi();
                    iceridekiler.add(this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0));
                    this.getKontrol().getKat_bilgi()[kat].yolcu_sil(this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).getYolcu_sayisi());
                    this.getKontrol().getKat_bilgi()[kat].getKuyruk().remove(0);  
                    
                    }catch(IndexOutOfBoundsException | NullPointerException e)
                    {
                        
                    }
                    

                }
                else
                {
                    if(temp<10)
                    {
                    deneme = new Asansor_kuyruk();
                    temp = 10-temp;
                    deneme.setUlasilacak_kat(this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).getUlasilacak_kat());
                    deneme.setYolcu_sayisi(temp);
                    this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).setYolcu_sayisi(this.getKontrol().getKat_bilgi()[kat].getKuyruk().get(0).getYolcu_sayisi()-temp);
                    this.getKontrol().getKat_bilgi()[kat].yolcu_sil(temp);
                    iceridekiler.add(deneme);
                      
                    }
                   
                }
                i++;

            } while (kapa <= kapasite);
            return iceridekiler;
        } else {
            return iceridekiler;
        }

    }
     
    public synchronized void yolcu_indir(int kat) {
        int i = 0;   
        this.hareket.remove(0);
        this.yolcu_sayisi -= this.inside.get(i).getYolcu_sayisi();
        if (this.inside.get(i).getUlasilacak_kat() == 0) {
            this.kontrol.setCikis_yapan(this.inside.get(i).getYolcu_sayisi());
        } else {
            this.kontrol.getKat_bilgi()[this.inside.get(i).getUlasilacak_kat()].setKatta_bulunan_kisi(this.inside.get(i).getYolcu_sayisi());
            this.kontrol.getKat_bilgi()[this.inside.get(i).getUlasilacak_kat()].setSanal_katta_bulunan(this.inside.get(i).getYolcu_sayisi());
        }

        this.inside.remove(i);

    }

    @Override
    public void run() {

        while (true) {
           if (this.isKontrol_asansor() == false) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
            }
            
            if (this.isKontrol_asansor() == true) {
               
                this.asansor_durum = true;
                if (this.yolcu_sayisi == 0 && this.getHareket().isEmpty()) {
                    Asansor_hareket a = this.getKontrol().istek_Varmi(asansor_id, this.bulundugu_kat, this.asansor_id);
                    if (a != null) {
                        hedef_kat = a.getVaracagi_kat();
                        this.hareket(a);
                        if (a.getVaracagi_kat() == this.bulundugu_kat) {
                            System.out.println(String.format("%d. Asansor %d.katta kapılarını açıyor", this.asansor_id, a.getVaracagi_kat()));
                            System.out.println("\n");
                        } else {
                            System.out.println(String.format("%d. Asansor %d.kata almak için gidiyor", this.asansor_id, a.getVaracagi_kat()));
                            System.out.println("\n");
                        }
                    }

                } else if (!this.getHareket().isEmpty()) {
                    ArrayList<Asansor_kuyruk> temp = new ArrayList<>();
                    Asansor_hareket hareket = this.getHareket().get(0);
                    hedef_kat = hareket.getVaracagi_kat();
                    if (hareket.getVaris_suresi() <= this.time.getZaman()) {
                        this.bulundugu_kat = this.hareket.get(0).getVaracagi_kat();
                        if (this.yolcu_sayisi == 0) {
                            this.getHareket().remove(0);
                            inside.addAll(this.yolcu_yukle2(hareket.getVaracagi_kat(), this.asansor_id, this.max_kapasite));
                            if (!inside.isEmpty()) {
                                Asansor_hareket firstEvent = this.yolcu_yukle(inside);
                            } else {
                                this.getKontrol().getKat_bilgi()[hareket.getVaracagi_kat()].setYolcu_istek(false);
                            }
                        } else {
                            this.yolcu_indir(hareket.getVaracagi_kat());
                            if (this.asansor_id != 0 && this.yolcu_sayisi == 0) {

                                this.setKontrol_asansor(false);
                            }

                        }
                    }

                }

            }

        }
    }

}























